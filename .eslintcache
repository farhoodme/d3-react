[{"D:\\Projects\\dcipher-frontend-challenge\\src\\reportWebVitals.ts":"1","D:\\Projects\\dcipher-frontend-challenge\\src\\App.tsx":"2","D:\\Projects\\dcipher-frontend-challenge\\src\\index.tsx":"3"},{"size":425,"mtime":1607587824146,"results":"4","hashOfConfig":"5"},{"size":3746,"mtime":1607849548782,"results":"6","hashOfConfig":"5"},{"size":500,"mtime":1607587824146,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"sorn6w",{"filePath":"10","messages":"11","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Projects\\dcipher-frontend-challenge\\src\\reportWebVitals.ts",[],"D:\\Projects\\dcipher-frontend-challenge\\src\\App.tsx",["15","16","17"],"import React, {useRef, useState, useEffect} from 'react';\nimport * as d3 from 'd3';\nimport './App.css';\nimport data from './data.json';\n\nconst groupBy = (array) => {\n  const years = array.reduce((result, currentValue) => {\n    (result).push(\n      {\n        \"token\": currentValue.tokens.reduce((token, i) => {\n          return i.value\n        }, null),\n        \"year\": currentValue.PY,\n        \"value\": currentValue.tokens.reduce((token, i) => {\n          return i.id.value\n        }, null)\n      }\n    );\n    return result;\n  }, []);\n\n  console.log(JSON.stringify(years));\n\n  //return years;\n};\n\nfunction App() {\n  const [maxItem, setMaxItem] = useState(50);\n  const [selection, setSelection] = useState<null | d3.Selection<\n      SVGSVGElement | null,\n      unknown,\n      null,\n      undefined\n      >>(null);\n  const svgRef = useRef<SVGSVGElement | null>(null);\n  const keys = [\n    \"2009\",\n    \"2010\",\n    \"2011\",\n    \"2012\",\n    \"2013\",\n    \"2014\"\n  ];\n  var margin = {top: 20, right: 20, bottom: 60, left: 30},\n    width = 960 - margin.left - margin.right,\n    height = 300 - margin.top - margin.bottom;\n\n  var tokenNames = data.map(d => d.token);\n  var yearNames = data[0].values.map((d) => { return d.year; });\n\n  // The scale the groups:\n  var x0 = d3.scaleBand().domain(tokenNames.slice(0, maxItem)).rangeRound([0, width]).paddingInner(0.02);\n\n  // The scale for each bar:\n  var x1 = d3.scaleBand().domain(yearNames).rangeRound([0, x0.bandwidth()]).padding(0.05);\n\n  var y = d3.scaleLinear().domain([0, d3.max(data.slice(0, maxItem), token => d3.max(token.values, d => d.value))!]).rangeRound([height, 0]);\n\n  var color = d3.scaleOrdinal<string>().range([\"#063f5b\", \"#767b90\", \"#314b7a\", \"#66a277\", \"#688c9c\", \"#2ebdcd\"]);\n\n  useEffect(() => {   \n    if(!selection) {\n      setSelection(d3.select(svgRef.current))\n    } else {\n      var svg = selection\n      .append(\"g\")\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n      svg.append(\"g\")\n        .selectAll(\"g\")\n        .data(data.slice(0, maxItem))\n        .enter().append(\"g\")\n        .attr(\"class\",\"barGroup\")\n        .attr(\"transform\", d => \"translate(\" + x0(d.token) + \",0)\")\n        .selectAll(\"rect\")\n        .data(d => d.values)\n        .enter().append(\"rect\")\n        .attr(\"x\", d => x1(d.year)!)\n        .attr(\"y\", d => y(d.value))\n        .attr(\"width\", x1.bandwidth())\n        .attr(\"height\", d => height - y(d.value))\n        .attr(\"fill\", d => color(d.year));\n\n      svg.append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(d3.axisBottom(x0))\n        .selectAll(\"text\")\n        .attr(\"transform\", \"rotate(45)\")\n        .style(\"text-anchor\", \"start\")\n\n      svg.append(\"g\")\n        .call(d3.axisLeft(y))\n        .append(\"text\")\n        .attr(\"y\", -5)\n        .attr(\"fill\", \"#000\")\n        .attr(\"font-weight\", \"bold\")\n        .attr(\"text-anchor\", \"start\")\n        .text(\"count(id)\");\n\n      var legend = svg.append(\"g\")\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"font-size\", 10)\n          .attr(\"text-anchor\", \"end\")\n          .selectAll(\"g\")\n          .data(keys)\n          .enter().append(\"g\")\n          .attr(\"transform\", function(d, i) { return \"translate(0,\" + i * 17 + \")\"; });\n\n      legend.append(\"rect\")\n        .attr(\"x\", width - 25)\n        .attr(\"width\", 15)\n        .attr(\"height\", 15)\n        .attr(\"fill\", color)\n        .attr(\"stroke\", color)\n        .attr(\"stroke-width\", 1);\n\n      legend.append(\"text\")\n        .attr(\"x\", width - 30)\n        .attr(\"y\", 8)\n        .attr(\"dy\", \"0.32em\")\n        .text(d => d);\n    }\n  }, [selection]);\n\n  return (\n    <div className=\"App\">\n      <svg ref={svgRef} width=\"960\" height=\"300\"></svg>\n    </div>\n  );\n}\n\nexport default App;\n","D:\\Projects\\dcipher-frontend-challenge\\src\\index.tsx",[],{"ruleId":"18","severity":1,"message":"19","line":6,"column":7,"nodeType":"20","messageId":"21","endLine":6,"endColumn":14},{"ruleId":"18","severity":1,"message":"22","line":28,"column":19,"nodeType":"20","messageId":"21","endLine":28,"endColumn":29},{"ruleId":"23","severity":1,"message":"24","line":123,"column":6,"nodeType":"25","endLine":123,"endColumn":17,"suggestions":"26"},"@typescript-eslint/no-unused-vars","'groupBy' is assigned a value but never used.","Identifier","unusedVar","'setMaxItem' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'color', 'height', 'keys', 'margin.left', 'margin.top', 'maxItem', 'width', 'x0', 'x1', and 'y'. Either include them or remove the dependency array.","ArrayExpression",["27"],{"desc":"28","fix":"29"},"Update the dependencies array to be: [color, height, keys, margin.left, margin.top, maxItem, selection, width, x0, x1, y]",{"range":"30","text":"31"},[3599,3610],"[color, height, keys, margin.left, margin.top, maxItem, selection, width, x0, x1, y]"]